
CLN_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
echo "Importing CLN aliases from $CLN_DIR/clnrc"

alias l='lightning-cli '
#
# runs suez with chan ids and forwarding stats
alias s='cd $HOME/suez && poetry run ./suez --client=c-lightning --show-chan-ids --show-forwarding-stats'
# total routed volume
routed() {
	echo "Calculating..."
	tmp=$((`lightning-cli listforwards | jq '.forwards[] | select  (.status == "settled") | .out_msatoshi' | awk '{n += \$1}; END{print n}' ` / 1000 ))
	routed_sats=`numfmt --g $tmp`
	tmp=$((`lightning-cli listforwards | jq '.forwards[] | select  (.status == "settled") | .fee' | awk '{n += \$1}; END{print n}' ` / 1000))
	total_fees=`numfmt --g $tmp`
	echo "We routed $routed_sats sats with $total_fees sats in fees"
}
alias fees="lightning-cli listforwards | jq '.forwards[] | select  (.status == \"settled\") | .fee' | awk '{n += \$1}; END{print n}' | numfmt --g"
#
# Set channel fees and htlc limits, appends 99 to ppm, 0 base
lnchan() {
	fee="${2}99"
	size=`lightning-cli listpeers | jq '.peers[] | .channels[] | select( .short_channel_id == "'$1'" ) | .msatoshi_to_us ' `
	if [ $size -lt 50000 ]; then
	    size=1000
        elif [ $size -lt 10000000000 ]; then
            size=$((size / 5))
	else
            size=2345678000
	fi
        echo "Setting channel fees to $fee and max htlc to $size"
        lightning-cli setchannel $1 0 $fee 1000 $size 
}
# list all nodes with liquidity ads
alias l-ads='lightning-cli listnodes | grep -B20 -A7 option_will_fund'
#
# closes channel marking the peer as bad
BAD_PEERS="$CLN_DIR/badpeers"
lnclose() {
	if [ "$#" -ne 1 ]; then
		echo "Must specify short channel id to close"
	else
		peer=`lnpeerbychan "$1"`
		if grep -Fxq "$1" "$BAD_PEERS" ; then
			echo $peer >> $BAD_PEERS
			echo "Peer $peer marked as bad"
		else
			echo "Peer $peer was already marked as bad, too bad"
		fi
		lightning-cli close -k id="$1" feerange="[1,11]" unilateraltimeout=240 && \
		echo "Channel $1 closed"
	fi
}
#
# opens the channel checking if the peer is in the badlist
lnopen() {
	if [ "$#" -ne 2 ]; then
		echo "Must specify node_id and amount (sats) to open a channel"
	else
		case `grep -Fx "$1" "$BAD_PEERS" > /dev/null; echo $?` in
			0)
				echo "Node $1 is in $BAD_PEERS list, won't proceed!"
				;;
			1)
				# push_msat= to gift some sats to the peer
				lightning-cli fundchannel -k id=$1 amount=$2 && \
				echo "Good, opened channel"
				;;
			*)
				echo "Oops. Error occured, no channel opened"
				;;
		esac
	fi
}
#
# Opens a dualfunded channel based on liquid ad
lnopendual() {
	if [ "$#" -ne 3 ]; then
		echo "Must specify node_id, amount (btc) and compact lease id to open dual funded channel"
	else
		lightning-cli fundchannel -k id=$1 amount=${2}btc request_amt=${2}btc compact_lease=$3 && \
		echo "Good, opened a dual-funded channel"
	fi
}
#
# finds peer id by short channel id
lnpeerbychan() {
	if [ "$#" -ne 1 ]; then
                echo "Must specify short_channel_id to lookup peer id"
        else
		lightning-cli listpeers | jq '.peers[] | select( .channels[].short_channel_id == "'$1'" ) | .id' | sed s/\"//g
        fi
}
#
# Rebalances out using circular
lcpush() {
	if [ "$#" -ne 1 ]; then
		echo "Must specify short_channel_id to rebalance 2M sats"
	else
		echo "Rebalancing out..."
		lightning-cli circular-push -k amount=2000000 maxppm=400 filluptopercent=0.41 outscid=$1
	fi
}
#
# Rebalances in using circular
lcpull() {
	if [ "$#" -ne 1 ]; then
		echo "Must specify short_channel_id to rebalance 2M sats"
	else
		echo "Rebalancing in..."
		lightning-cli circular-pull -k amount=2000000 maxoutppm=300 maxppm=400 depleteuptopercent=0.37 depleteuptoamount=2500500 inscid=$1
	fi
}

