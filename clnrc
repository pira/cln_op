
CLN_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
PATH=$PATH:$CLN_DIR
echo "Importing CLN aliases from $CLN_DIR/clnrc"

alias l='lightning-cli '
#
# Install suez:  https://github.com/prusnak/suez
# Runs suez with chan ids and forwarding stats
alias s='cd $HOME/suez && python3 ./suez --client=c-lightning --show-chan-ids --show-forwarding-stats'
#
# total routed volume
routed() {
	echo "Calculating..."
	tmp=`lightning-cli listforwards | jq '.forwards[] | select  (.status == "settled") | .out_msat' | awk '{n += \$1}; END{print n}' `
	routed_sats=`_readable_msats $tmp`
	tmp=`lightning-cli listforwards | jq '.forwards[] | select  (.status == "settled") | .fee_msat' | awk '{n += \$1}; END{print n}' `
	total_fees=`_readable_msats $tmp`
	echo "We routed $routed_sats with $total_fees in fees"
}
#
# Total fees
alias fees="lightning-cli listforwards | jq '.forwards[] | select  (.status == \"settled\") | .fee_msat' | awk '{n += \$1}; END{print n}' | numfmt --g"
#
# Set channel fees and htlc limits, appends 69 to ppm, 0 base
lnchan() {
	if [ "${2}1" == '01' ]; then
	    fee="1"
	else
	    fee="${2}69"
	fi
  chan=`lightning-cli listpeerchannels | jq --arg chanid $1 '.channels[] | select(.short_channel_id == $chanid)'`
  if [ -z "$chan" ]; then
    echo "Channel not found, aborting"
    return
  fi
	size=`echo $chan | jq '.to_us_msat' `
	total=`echo $chan | jq '.total_msat' `
	if [[ "$total" -eq 0 ]]; then
	    ratio=0
	else
	    ratio=$((100 * size / total))
	fi
	# ratio is percent of channel liquidity on our side	
	# we want to limit max_htlc severely on depleting channels while allowing rebalances
  if [ $size -gt 10 ]; then
    rnd=$((RANDOM % ($size / 10) + 1))
  else
    rnd=0
  fi
	if [ $ratio -gt 60 ]; then
	    size=$((size / 2 + $rnd))
	elif [ $ratio -gt 40 ]; then
	    size=$((size / 3 + $rnd))
	elif [ $ratio -gt 20 ]; then
	    size=$((size / 5 + $rnd))
	elif [ $ratio -gt 5 ]; then
	    size=$((size / 10 + $rnd))
	else
	    size=$((size / 20))
	fi
	min_size=1000
	size=$((size > min_size ? size : min_size ))
	# round up to sats	
	size=$((size / 1000 * 1000))
	human_size=`_readable_msats $size`
  echo "Setting channel fees to $fee and max htlc to $human_size (channel has $ratio% on our side)"
  lightning-cli setchannel $1 0 $fee $min_size $size 
}
#
# list all nodes with liquidity ads
alias l-ads='lightning-cli listnodes | grep -B20 -A7 option_will_fund'
#
# closes channel marking the peer as bad
BAD_PEERS="$CLN_DIR/badpeers"
lnclose() {
	if [ "$#" -ne 1 ]; then
		echo "Must specify short channel id to close"
	else
		peer=`lnpeerbychan "$1"`
		case `grep -Fx "$peer" "$BAD_PEERS" > /dev/null; echo $?` in
			0)
				echo "Peer $peer was already marked as bad, too bad"
				;;
			1)
				echo $peer >> $BAD_PEERS
				echo "Peer $peer marked as bad"
				;;
		esac
		lightning-cli close -k id="$1" feerange="[1,111]" unilateraltimeout=5 && \
		echo "Channel $1 closed"
	fi
}
#
# Opens the channel checking if the peer is in the badlist
lnopen() {
	if [ "$#" -ne 2 ]; then
		echo "Must specify node_id and amount (sats) to open a channel"
	else
		node_split=(${1//@/ })
		peer=${node_split[0]}
		case `grep -Fx "$peer" "$BAD_PEERS" > /dev/null; echo $?` in
			0)
				echo "Node $peer is in $BAD_PEERS list, won't proceed!"
				;;
			1)
				# push_msat= to gift some sats to the peer
				lightning-cli fundchannel -k id=$1 amount=$2 feerate=normal announce=true && \
				echo "Good, opened channel"
				;;
			*)
				echo "Oops. Error occured, no channel opened"
				;;
		esac
	fi
}
#
# Opens a dualfunded channel based on liquid ad
lnopendual() {
	if [ "$#" -ne 3 ]; then
		echo "Must specify node_id, amount (btc) and compact lease id to open dual funded channel"
	else
		lightning-cli fundchannel -k id=$1 amount=${2}btc request_amt=${2}btc compact_lease=$3 && \
		echo "Good, opened a dual-funded channel"
	fi
}
#
# finds peer id by short channel id
lnpeerbychan() {
	if [ "$#" -ne 1 ]; then
    echo "Must specify short_channel_id to lookup peer id"
  else
    lightning-cli listpeerchannels | jq --arg chanid $1 '.channels[] | select(.short_channel_id == $chanid) | .peer_id'  | sed s/\"//g
  fi
}
#
# Couple rebalancing commands, you will need circular plugin for them to work:
# https://github.com/giovannizotta/circular.git
#
# Rebalances out using circular
lcpush() {
	if [ "$#" -ne 1 ]; then
		echo "Must specify short_channel_id to rebalance 2Mˢ"
	else
		split=$(( 80000 + $RANDOM ))
		total_amount=$(( $split * 20 ))
		readable=`_readable_msats $(( $total_amount * 1000 ))`
		echo "Rebalancing out $readable..."
		lightning-cli circular-push -k amount=$total_amount splitamount=$split maxppm=100 filluptopercent=0.6 outscid=$1
	fi
}
#
# Rebalances in using circular
lcpull() {
	if [ "$#" -ne 1 ]; then
		echo "Must specify short_channel_id to rebalance 2Mˢ"
	else
		split=$(( 80000 + $RANDOM ))
		total_amount=$(( $split * 20 ))
		readable=`_readable_msats $(( $total_amount * 1000 ))`
		echo "Rebalancing in $readable..."
		lightning-cli circular-pull -k amount=$total_amount splitamount=$split maxoutppm=200 maxppm=100 depleteuptopercent=0.4 depleteuptoamount=2500500 inscid=$1
	fi
}
# return human readable msat representation
_readable_msats() {
	msats=$1
	if [ $msats -gt 100000000000 ]; then
	    numfmt --to=si --suffix='₿' $((msats / 100000000000))
	else 
	    numfmt --to=si --suffix='s̄' $((msats / 1000))
	fi
}
